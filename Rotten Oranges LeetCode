In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

Example 1:
Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.

Note:
1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] is only 0, 1, or 2.

Approach:
As we have to deal in terms of i,j and time ,we will define our own datatype
struct mydata{
        int time;
        int x,y;
};
Think of level order traversal of tree ,where wee insert all childs of a particular node.
Here we have to do the same thing.HOW?
For each rotten oranges, we have to work on all the possible neighbours containing fresh oranges.
This can be achieved by help of queue.
At first,that is at time=0,rotten oranges are already rotten.So we will push all the information of rotten oranges into queue;
queue<mydata> q;
where information of particular rotten orange at time t,is
 mydata d1;
 d1.time=t;
 d1.x=i;
 d1.y=j;
 q.push(d1);
 int ans=0;
 Once we have pushed all rotten oranges in queue,we we would take each neighbour in observation ,that if it is 1 then it should be rotten(we will update the value
 of that neighbour and push it into stack as it will further have potential to rot its adjacent oranges.)While pushing into queue ,time factor should be taken care of.
 that is if we are working on lets say X mydata,then it can rot its adjcanet orange in X.time+1 minutes.So the time of its adjacent oranges will be X.time+1.
 Each time we will check if ans is smaller than X.time .If it is then update ans=X.time;
 Once queue is empty, we will check if any cell has fresh orange.if the answer is yes then we will return-1 else we will return ans.
 
 
 
 Code////
 
 class Solution {
public:
    struct mydata{
        int time;
        int x,y;
    };
    bool is_valid(int x,int y,int r,int c){
        return ( x>=0 && x<r && y>=0 && y<c);
    }
    bool check(vector<vector<int>>& grid){
        int r=grid.size();
        int c=grid[0].size();
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==1){
                    return true;
                }
            }
        }
        return false;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        queue<mydata> q;
        int r=grid.size();
        int c=grid[0].size();
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==2){
                    mydata d;
                    d.time=0;
                    d.x=i;
                    d.y=j;
                    q.push(d);
                }
                else if( grid[i][j]==1){
                    int z=0;
                    if(is_valid(i-1,j,r,c) && grid[i-1][j]==0){
                        z+=1;
                    }
                    if(is_valid(i+1,j,r,c) && grid[i+1][j]==0){
                        z+=1;
                    }
                    if(is_valid(i,j-1,r,c) && grid[i][j-1]==0){
                        z+=1;
                    }
                    if(is_valid(i,j+1,r,c) && grid[i][j+1]==0){
                        z+=1;
                    }
                    if(z==4 && i>0 && i<r-1 && j>0 && j<c-1){
                        return -1;
                    }
                    else if(z==2&&((i==0 && j==0)||(i==0 && j==c-1)||(i==r-1 && j==0)||(i==r-1 &&j==c-1))){
                        return -1;
                    }
                }
            }
        }
        int ans=0;
        while(!q.empty()){
            mydata node=q.front();
            q.pop();
            int i=node.x;
            int j=node.y;
            int t=node.time;
            if(is_valid(i-1,j,r,c) && grid[i-1][j]==1){
                grid[i-1][j]=2;
                mydata d;
                d.time=t+1;
                d.x=i-1;
                d.y=j;
                q.push(d);
            }
            if(is_valid(i+1,j,r,c) && grid[i+1][j]==1){
                grid[i+1][j]=2;
                mydata d;
                d.time=t+1;
                d.x=i+1;
                d.y=j;
                q.push(d);
            }
            if(is_valid(i,j-1,r,c) && grid[i][j-1]==1){
                grid[i][j-1]=2;
                mydata d;
                d.time=t+1;
                d.x=i;
                d.y=j-1;
                q.push(d);
            }
            if(is_valid(i,j+1,r,c) && grid[i][j+1]==1){
                grid[i][j+1]=2;
                mydata d;
                d.time=t+1;
                d.x=i;
                d.y=j+1;
                q.push(d);
            }
            if(ans<t){
                ans=t;
            }            
        }
        return check(grid)?-1:ans;
    }
};
 
